{
  "active": true,
  "connections": {
    "separa_linhas": {
      "main": [
        [
          {
            "node": "Replace Me",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "formata_data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "e_agora": {
      "main": [
        [
          {
            "node": "busca_dados",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "separa_linhas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "formata_data": {
      "main": [
        [
          {
            "node": "e_agora",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "busca_dados": {
      "main": [
        [
          {
            "node": "pesquisa_funil",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "dados5": {
      "main": [
        [
          {
            "node": "entra_na_fila5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "pesquisa_funil": {
      "main": [
        [
          {
            "node": "pesquisa_grupo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "pesquisa_grupo": {
      "main": [
        [
          {
            "node": "separa_linhas1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "separa_linhas1": {
      "main": [
        [
          {
            "node": "separa_linhas",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "dados5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "entra_na_fila5": {
      "main": [
        [
          {
            "node": "separa_linhas1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "todo_min": {
      "main": [
        [
          {
            "node": "ClickUp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ClickUp": {
      "main": [
        [
          {
            "node": "separa_linhas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-08-22T00:39:22.459Z",
  "id": "GaViAWnjo0HAtBU9",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "⌚[FUTURE MINDS] - Mensagem nos Grupos - Parte 1",
  "nodes": [
    {
      "parameters": {},
      "id": "b948cac9-9800-47b6-9492-0b58d6c69a27",
      "name": "Replace Me",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        320,
        120
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "b48d1d21-3b19-4874-ad61-d5d4c3abecae",
      "name": "separa_linhas",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        100,
        220
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "4d7db62c-6fca-4ec8-8551-4a2f68627bea",
              "leftValue": "={{ $node[\"formata_data\"].json[\"data_formatada\"] }}",
              "rightValue": "={{ $now.toFormat(\"yyyy-MM-dd HH:mm\")}}",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "84a4b6a8-455f-4576-9a36-cdb5473e98de",
      "name": "e_agora",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        480,
        280
      ]
    },
    {
      "parameters": {
        "operation": "formatDate",
        "date": "={{ $node[\"separa_linhas\"].json[\"due_date\"] }}",
        "format": "custom",
        "customFormat": "yyyy-MM-dd HH:mm",
        "outputFieldName": "data_formatada",
        "options": {
          "includeInputFields": false,
          "timezone": true
        }
      },
      "id": "253eee91-0392-4ede-8e7a-b432c9944bf6",
      "name": "formata_data",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        320,
        280
      ]
    },
    {
      "parameters": {
        "jsCode": "const respostas = $node[\"separa_linhas\"].json[\"custom_fields\"] || [];\n\n// Pegando o campo específico 'Tipo de Mensagem'\nlet tipo_msg_field = respostas.find(answer => answer.name === \"Tipo de Mensagem\");\nlet tipo_msg = \"Desconhecido\";\n\n// Pegando o campo específico 'Destino da Mensagem'\nlet destino_msg_field = respostas.find(answer => answer.name === \"Destino da Mensagem\");\nlet destino_msg = \"Desconhecido\";\n\n// Pegando o campo específico 'Versão funil'\nlet versao_funil = respostas.find(answer => answer.name === \"Versão funil\")?.value || \"\";\n\n// Verifica se o campo 'Tipo de Mensagem' existe e tem opções configuradas\nif (tipo_msg_field && tipo_msg_field.type_config && Array.isArray(tipo_msg_field.type_config.options)) {\n    let tipo_msg_value = tipo_msg_field.value;\n\n    // Encontra a opção correspondente ao valor de 'orderindex'\n    const tipoOption = tipo_msg_field.type_config.options.find(opt => opt.orderindex === tipo_msg_value);\n\n    // Se encontrar a opção, pega o 'name'\n    if (tipoOption) {\n        tipo_msg = tipoOption.name;\n    }\n}\n\n// Verifica se o campo 'Destino da Mensagem' existe e tem opções configuradas\nif (destino_msg_field && destino_msg_field.type_config && Array.isArray(destino_msg_field.type_config.options)) {\n    let destino_msg_value = destino_msg_field.value;\n\n    // Encontra a opção correspondente ao valor de 'orderindex'\n    const destinoOption = destino_msg_field.type_config.options.find(opt => opt.orderindex === destino_msg_value);\n\n    // Se encontrar a opção, pega o 'name'\n    if (destinoOption) {\n        destino_msg = destinoOption.name;\n    }\n}\n\nlet arquivo = respostas.find(answer => answer.name === \"Base64 da Mídia\")?.value || \"\";\nlet evento = respostas.find(answer => answer.name === \"Evento\")?.value || \"\";\nlet funil = respostas.find(answer => answer.name === \"Funil\")?.value || \"\";\nlet copy = $node[\"separa_linhas\"].json[\"text_content\"] || \"\";\n\n// Retorna os valores processados com os nomes ajustados\nreturn {\n  arquivo,\n  tipo_msg,\n  destino_msg,\n  versao_funil,\n  copy,\n  evento,\n  funil\n}"
      },
      "id": "eb62bb73-1760-4d24-825d-c6c1d0688743",
      "name": "busca_dados",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        640,
        200
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "32ca90fd-f0e8-4ceb-90e5-2fb2c2d0332a",
              "name": "destino",
              "value": "={{ $node[\"busca_dados\"].json[\"destino_msg\"] }}",
              "type": "string"
            },
            {
              "id": "16fba742-c2e2-4a46-9743-75ff3b5d6da4",
              "name": "id_grupo",
              "value": "={{ $node[\"separa_linhas1\"].json[\"groupJid\"] }}",
              "type": "string"
            },
            {
              "id": "edca72f1-44ad-4b67-9e34-7d8e8fa9dbcf",
              "name": "arquivo",
              "value": "={{ $node[\"busca_dados\"].json[\"arquivo\"].trim() }}",
              "type": "string"
            },
            {
              "id": "c5859b53-c18f-4c04-841d-82474173d454",
              "name": "copy",
              "value": "={{ $node[\"busca_dados\"].json[\"copy\"] }}",
              "type": "string"
            },
            {
              "id": "f0f03a3c-fb1d-42a2-abab-58225b8e65b1",
              "name": "valor_msg",
              "value": "={{ $node[\"busca_dados\"].json[\"tipo_msg\"] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "f0dab8d1-1f18-42fc-b99e-1a10b006d630",
      "name": "dados5",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        1300,
        240
      ]
    },
    {
      "parameters": {
        "operation": "select",
        "table": {
          "__rl": true,
          "value": "funis",
          "mode": "list",
          "cachedResultName": "funis"
        },
        "returnAll": true,
        "where": {
          "values": [
            {
              "column": "nome",
              "value": "={{ $node[\"busca_dados\"].json[\"funil\"] }}"
            },
            {
              "column": "versao",
              "value": "={{ Number($node[\"busca_dados\"].json[\"versao_funil\"]) }}"
            }
          ]
        },
        "options": {}
      },
      "id": "3e0640b3-e43d-4af5-8e12-d1a467822528",
      "name": "pesquisa_funil",
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.2,
      "position": [
        800,
        200
      ],
      "credentials": {
        "mySql": {
          "id": "JtvnOichfjUUmLAo",
          "name": "[MySQL] - Future Minds"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "table": {
          "__rl": true,
          "value": "grupos",
          "mode": "list",
          "cachedResultName": "grupos"
        },
        "returnAll": true,
        "where": {
          "values": [
            {
              "column": "funil",
              "value": "={{ $node[\"pesquisa_funil\"].json[\"id\"] }}"
            }
          ]
        },
        "combineConditions": "OR",
        "options": {}
      },
      "id": "db629f3c-2ce2-46df-9c1c-ecb20294906f",
      "name": "pesquisa_grupo",
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.2,
      "position": [
        960,
        200
      ],
      "credentials": {
        "mySql": {
          "id": "JtvnOichfjUUmLAo",
          "name": "[MySQL] - Future Minds"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "reset": "={{ $node[\"separa_linhas1\"].context[\"done\"] }}"
        }
      },
      "id": "83e3ff5e-483c-468f-a2b6-442d2b6c914c",
      "name": "separa_linhas1",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1120,
        200
      ]
    },
    {
      "parameters": {
        "queue": "=Disparos - Evolution",
        "options": {
          "arguments": {
            "argument": [
              {
                "key": "x-queue-type",
                "value": "quorum"
              }
            ]
          },
          "durable": true
        }
      },
      "id": "2f2f206c-a4ee-4f76-a7f3-03e99c9be812",
      "name": "entra_na_fila5",
      "type": "n8n-nodes-base.rabbitmq",
      "typeVersion": 1,
      "position": [
        1480,
        240
      ],
      "credentials": {
        "rabbitmq": {
          "id": "LuHAjLmTOXHZ3CMW",
          "name": "[RabbitMQ] - Future Minds"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 1
            }
          ]
        }
      },
      "id": "4ad38625-0287-4faa-8376-51d3ee1c5e2f",
      "name": "todo_min",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [
        -260,
        220
      ]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "operation": "getAll",
        "team": "3135484",
        "space": "55168085",
        "folder": "90132837125",
        "list": "901305192449",
        "filters": {}
      },
      "id": "1546dabb-f2ed-44af-bdb9-2cedc07b968b",
      "name": "ClickUp",
      "type": "n8n-nodes-base.clickUp",
      "typeVersion": 1,
      "position": [
        -80,
        180
      ],
      "credentials": {
        "clickUpOAuth2Api": {
          "id": "TQX2YNeqTbRwi9nN",
          "name": "[ClickUp] - Automagic Bots"
        }
      }
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:todo_min": {
      "recurrencyRules": []
    }
  },
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2024-12-20T14:34:54.911Z",
  "versionId": "e74a8985-e803-496c-aaa0-b38178cb2fdd"
}