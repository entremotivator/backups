{
  "active": false,
  "connections": {
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "reset memo": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Qdant Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Vector Store Tool",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "messageInfo": {
      "main": [
        [
          {
            "node": "delete vector store",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set vector store": {
      "main": [
        [
          {
            "node": "vector store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "vector store": {
      "main": [
        [
          {
            "node": "delete user account",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set user account": {
      "main": [
        [
          {
            "node": "userAccount",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Account User": {
      "main": [
        [
          {
            "node": "set user account",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get user account": {
      "main": [
        [
          {
            "node": "Json2Object",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "has user account?": {
      "main": [
        [
          {
            "node": "userAccount",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Account User",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "delete user account": {
      "main": [
        [
          {
            "node": "get user account",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "chatInput": {
      "main": [
        [
          {
            "node": "chatConfig",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "userAccount": {
      "main": [
        [
          {
            "node": "config prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "has vector store? 2": {
      "main": [
        [
          {
            "node": "set vector store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "has vector store?": {
      "main": [
        [
          {
            "node": "vector store",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "fetch vector store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get vector store": {
      "main": [
        [
          {
            "node": "has vector store?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "delete vector store": {
      "main": [
        [
          {
            "node": "get vector store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "fetch vector store": {
      "main": [
        [
          {
            "node": "has vector store? 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "talk to agent?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "config prompt": {
      "main": [
        [
          {
            "node": "reset memo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "reset memory": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Vector Store Retriever": {
      "ai_retriever": [
        [
          {
            "node": "Contextual Compression Retriever",
            "type": "ai_retriever",
            "index": 0
          }
        ]
      ]
    },
    "Contextual Compression Retriever": {
      "ai_retriever": [
        [
          {
            "node": "Question and Answer Chain",
            "type": "ai_retriever",
            "index": 0
          }
        ]
      ]
    },
    "Question and Answer Chain": {
      "main": [
        [
          {
            "node": "Response WK",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Qdant Vector Store": {
      "ai_vectorStore": [
        [
          {
            "node": "Vector Store Tool",
            "type": "ai_vectorStore",
            "index": 0
          }
        ]
      ]
    },
    "Store Info Tool": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Contextual Compression Retriever",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI1": {
      "ai_embedding": [
        [
          {
            "node": "Qdant Vector Store1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Qdant Vector Store1": {
      "ai_vectorStore": [
        [
          {
            "node": "Vector Store Retriever",
            "type": "ai_vectorStore",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Question and Answer Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Json2Object": {
      "main": [
        [
          {
            "node": "has user account?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar CE": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar UE": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar GE": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar DE": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar AC": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Test Agent Store": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "talk to agent?": {
      "main": [
        [
          {
            "node": "messageInfo",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Question and Answer Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "wk response whatsapp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Sign Msg",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sign Msg": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "chatConfig": {
      "main": [
        [
          {
            "node": "talk to agent?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-10-11T17:43:10.651Z",
  "id": "LS8CfvECZu2puiXb",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "AI 4 iBox",
  "nodes": [
    {
      "parameters": {
        "model": "gpt-4o-mini-2024-07-18",
        "options": {
          "temperature": 0.4
        }
      },
      "id": "803470f4-9f4d-4311-8392-4fde92aeb5d0",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        5120,
        1540
      ],
      "credentials": {
        "openAiApi": {
          "id": "dRR3EqW0FEAbSHgt",
          "name": "william"
        }
      }
    },
    {
      "parameters": {
        "content": "## Gera a Resposta\nObs.: Seleciona a Base de Dados a ser usada de acordo com a Empresa de maneira Din√¢mica e a usa para responder a solicita√ß√£o",
        "height": 584.136756451777,
        "width": 498.9567360348815
      },
      "id": "dc7f1df1-853f-438b-a471-364548cdb8c0",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        4960,
        1260
      ]
    },
    {
      "parameters": {
        "model": "llama-3.2-90b-text-preview",
        "options": {
          "temperature": 0
        }
      },
      "id": "ea9cb605-d246-4097-aefb-7ac4887762e2",
      "name": "Groq Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        6180,
        1840
      ],
      "credentials": {
        "groqApi": {
          "id": "Qc9IFal2C1clPmRn",
          "name": "william"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=memo_{{ $('messageInfo').first().json.unique_id }}_ibox"
      },
      "id": "92271bd6-3591-41c7-a064-1ad2fc54eb2b",
      "name": "reset memo",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        5020,
        1380
      ],
      "alwaysOutputData": true,
      "credentials": {
        "redis": {
          "id": "ePjUcKkuSrLqo1Tt",
          "name": "vps"
        }
      }
    },
    {
      "parameters": {
        "model": "text-embedding-3-small",
        "options": {}
      },
      "id": "d083f0d9-0474-496e-80cb-390626b8c854",
      "name": "Embeddings OpenAI",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1,
      "position": [
        5900,
        1960
      ],
      "credentials": {
        "openAiApi": {
          "id": "dRR3EqW0FEAbSHgt",
          "name": "william"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "mode": "id",
          "value": "K7oBqF1vnvw165RG"
        },
        "options": {
          "waitForSubWorkflow": false
        }
      },
      "id": "2772ddd3-1978-4d65-bb02-cd7d43220d45",
      "name": "wk response whatsapp",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.1,
      "position": [
        5820,
        1320
      ]
    },
    {
      "parameters": {},
      "id": "30a16fab-e52e-4a94-90a6-48e8e377e42d",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [
        2940,
        1320
      ],
      "disabled": true
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={{ $json.body ?? $json }}",
        "options": {}
      },
      "id": "226519af-b89f-420c-872f-25f07e7099a4",
      "name": "messageInfo",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3420,
        1300
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "425a712d-f598-4e72-a99e-65efb704c401",
        "options": {}
      },
      "id": "8d7fc780-5f0d-40e4-a56a-0b5b9e81557e",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        2940,
        1520
      ],
      "webhookId": "f018c59e-19b7-4fd7-b999-d948e47e57e8",
      "disabled": true
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=vector_store_{{ $('messageInfo').first().json.instance }}",
        "value": "={{ $json }}",
        "keyType": "hash",
        "expire": true,
        "ttl": 600
      },
      "id": "3b78caa3-0c4d-4ef9-bf74-3ee25daea5da",
      "name": "set vector store",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        4140,
        1600
      ],
      "credentials": {
        "redis": {
          "id": "ePjUcKkuSrLqo1Tt",
          "name": "vps"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"vector_name\": \"notion_ibox\",\n  \"instance_name\": \"{{ $('messageInfo').item.json.instance }}\"\n}",
        "options": {}
      },
      "id": "823a0db8-7d6c-4575-8162-f1f7306bc48c",
      "name": "vector store",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4140,
        1380
      ]
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=user_account_{{ $('messageInfo').item.json.remoteJid.split('@')[0] }}",
        "value": "={{ $json.user.toJsonString() ?? {} }}",
        "expire": true,
        "ttl": "={{ $json.user ? 120 : 60 }}"
      },
      "id": "5f1211a3-a5cb-4114-8aad-cf45a723bdf8",
      "name": "set user account",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        4740,
        1580
      ],
      "credentials": {
        "redis": {
          "id": "ePjUcKkuSrLqo1Tt",
          "name": "vps"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://ibox.delivery/api/whatsapp/user?number={{ $('messageInfo').item.json.remoteJid.split('@')[0] }}",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "with_plan"
            },
            {
              "name": "with_stores"
            }
          ]
        },
        "options": {}
      },
      "id": "cb3ba3f5-dd5c-4a5d-a1d4-14359ced9f02",
      "name": "Get Account User",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4600,
        1580
      ]
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "user_account",
        "key": "=user_account_{{ $('messageInfo').item.json.remoteJid.split('@')[0] }}",
        "keyType": "string",
        "options": {}
      },
      "id": "a4f15ba5-6cb5-4dc4-88da-5de95c115760",
      "name": "get user account",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        4380,
        1600
      ],
      "credentials": {
        "redis": {
          "id": "ePjUcKkuSrLqo1Tt",
          "name": "vps"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "cc151548-39ab-4280-8766-cb8f68fc41d8",
              "leftValue": "={{ $json.user_account.id }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "7c433835-23a3-4c51-bc0e-8286c32d55d4",
      "name": "has user account?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        4600,
        1380
      ]
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=user_account_{{ $('messageInfo').item.json.remoteJid.split('@')[0] }}"
      },
      "id": "1e776c25-c54e-42c6-856a-158202d081ea",
      "name": "delete user account",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        4400,
        1380
      ],
      "credentials": {
        "redis": {
          "id": "ePjUcKkuSrLqo1Tt",
          "name": "vps"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "content": "## Tenta retornar os dados do Usu√°rio",
        "height": 635.1924575090022,
        "width": 598.5677101799579,
        "color": 5
      },
      "id": "ac5f73aa-32d8-45a3-ad39-c621df1d486d",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        4320,
        1300
      ]
    },
    {
      "parameters": {
        "content": "## Retorna os dados da Loja com base na Inst√¢ncia",
        "height": 483.3176121655175,
        "width": 731.8422362672346,
        "color": 4
      },
      "id": "bb0eb679-3246-4ce2-9fe7-6a16f73d18db",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        3560,
        1300
      ]
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={{ $json.user_account ?? $json.user ?? {} }}",
        "options": {}
      },
      "id": "bb9be958-e979-414e-9e1f-bc65173c1dd7",
      "name": "userAccount",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4780,
        1380
      ]
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n    \"evo_api\": \"https://apiwp.wmst.com.br\",\n    \"instance\": \"ibox_cli_23\",\n    \"remoteJid\": \"5512982184879@s.whatsapp.net\",\n    \"pushName\": \"W.M. Solu√ß√µes Tecnologicas\",\n    \"fromMe\": false,\n    \"unique_id\": \"ibox_cli_23_5512982184879\",\n    \"debounce_time\": 5,\n    \"conversation\": \"{{ $json.chatInput }}\"\n  }",
        "options": {}
      },
      "id": "e854eabf-2012-469c-a24e-3f1f52c6cc13",
      "name": "chatConfig",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3020,
        1120
      ]
    },
    {
      "parameters": {
        "public": true,
        "options": {}
      },
      "id": "575b8c9a-f383-4abd-9e99-add6f3055883",
      "name": "chatInput",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        2880,
        1120
      ],
      "webhookId": "c7c83fca-4ff8-40dd-ac7c-def2bcf4dd91"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=vector_store_{{ $json.instance }}"
      },
      "id": "5dd7dc5d-4319-4f16-ba9e-2adef0ccf266",
      "name": "delete vector store",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        3600,
        1380
      ],
      "alwaysOutputData": true,
      "credentials": {
        "redis": {
          "id": "ePjUcKkuSrLqo1Tt",
          "name": "vps"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "cc151548-39ab-4280-8766-cb8f68fc41d8",
              "leftValue": "={{ $json.vector_name }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "065215d1-9a8a-469d-be43-9dbc84b7bd9e",
      "name": "has vector store? 2",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3980,
        1480
      ],
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "cc151548-39ab-4280-8766-cb8f68fc41d8",
              "leftValue": "={{ $json.vector_store.vector_name }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "176ae325-c557-407d-a946-b55a79015c67",
      "name": "has vector store?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3780,
        1380
      ],
      "disabled": true
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "=vector_store",
        "key": "=vector_store_{{ $('messageInfo').first().json.instance }}",
        "keyType": "hash",
        "options": {}
      },
      "id": "2ea9b730-99ce-4569-954e-b6943ea5bb60",
      "name": "get vector store",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        3620,
        1600
      ],
      "alwaysOutputData": false,
      "credentials": {
        "redis": {
          "id": "ePjUcKkuSrLqo1Tt",
          "name": "vps"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "empresas",
        "filters": {
          "conditions": [
            {
              "keyName": "instance_name",
              "keyValue": "={{ $('messageInfo').first().json.instance }}"
            }
          ]
        }
      },
      "id": "59436c8c-8339-4c9d-8e68-215b586f6a8c",
      "name": "fetch vector store",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        3780,
        1600
      ],
      "credentials": {
        "supabaseApi": {
          "id": "WWYYqpMcDDFZTW3g",
          "name": "william"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "name": "store_info",
        "description": "Use this tool to retrieve information about the company, available plans, how the system works, and frequently asked questions from users.",
        "topK": 5
      },
      "id": "92806acc-1b63-49fb-8e33-e5aa97a865cf",
      "name": "Vector Store Tool",
      "type": "@n8n/n8n-nodes-langchain.toolVectorStore",
      "typeVersion": 1,
      "position": [
        6000,
        1700
      ],
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "08eccb40-00d8-4101-a52e-f6cbaf728cd1",
              "name": "system",
              "value": "=\n# Function and Objective\n1. Process client messages and provide responses based on the rules and information from the \"store_info\" TOOL database, information about the company, available plans, how the system works.\n2. Schedule support appointments using Google Calendar when requested.\n\n# About the Customer Service\nStart the conversation politely, introducing yourself and asking if the user needs help with questions about the company, the system, or another related topic.\n\n**Example:**\n- \"Hi! I'm Stephany üòä. Can I help you with any questions about our company or system?\"\n\nThe current date and time are **{{ $now.toISO() }}**. All dates should be provided in ISO format in the requests but not in the responses to the user.\n\n# Responsibilities\n\n1. **Analyze the client's question intent**:\n   - Making an order, store hours, address, payment methods, store status, etc.\n   \n2. **Provide clear, polite, informal, and humorous responses**, always based on the database information.\n   - Use a friendly and casual tone.\n   \n3. **Use a maximum of 2 emojis per response** to keep the interaction light and friendly.\n   - Prefer emojis that reinforce positivity or engagement (e.g., üòä, üëç).\n   \n4. **Suggest plans according to the client's needs**:\n   - Highlight the benefits and features of the plans before mentioning the price.\n   - Only provide the price if asked, emphasizing the value and cost-benefit.\n\n5. **Provide the link \"https://ibox.delivery\" unformatted** whenever requested with a purchasing intent.\n\n6. **Divide long responses into parts** to facilitate understanding.\n   - Example: Separate contact details and prices.\n\n8. **NEVER provide information that is not in the \"store_info\" TOOL database**.\n\n9. **Add the user's name to the response when you think it's necessary** to personalize the service.\n\n# About the User\n- **Registered:** {{ $('userAccount').item.json.id ? 'yes' : 'no' }}\n- **Name:** {{ $('userAccount').first().json.nome ?? $('messageInfo').first().json.pushName }}\n- **Email:** {{ $('userAccount').first().json.email ?? '' }}\n- **Address:** {{ $('userAccount').first().json.endereco ?? '' }}\n- **Has the Plan:** \n  - {{ $('userAccount').first().json.plano \n      ? `${$('userAccount').first().json.plano.nome}${$('userAccount').first().json.plano.periodo_teste ? ', is in a trial period and' : ' and'} expires on ${$('userAccount').first().json.plano.expira_em}` \n      : 'no' \n    }}\n- **User session ID:** {{ $('messageInfo').first().json.unique_id }}\n",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "e25411fe-f86c-474d-9f79-9dff628b4865",
      "name": "config prompt",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        5020,
        1620
      ]
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "=memo_{{ $('messageInfo').first().json.unique_id }}_ibox",
        "sessionTTL": 300
      },
      "id": "bb0a2669-a806-4f30-a492-764dd3700367",
      "name": "Chat Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
      "typeVersion": 1.3,
      "position": [
        5260,
        1560
      ],
      "credentials": {
        "redis": {
          "id": "ePjUcKkuSrLqo1Tt",
          "name": "vps"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "call this tool to clean chat memory.",
        "operation": "delete",
        "key": "=memo_{{ $('messageInfo').first().json.unique_id }}_ibox"
      },
      "id": "96064a92-52c3-4fe5-9bbc-88e0c1053f66",
      "name": "reset memory",
      "type": "n8n-nodes-base.redisTool",
      "typeVersion": 1,
      "position": [
        5640,
        1580
      ],
      "credentials": {
        "redis": {
          "id": "ePjUcKkuSrLqo1Tt",
          "name": "vps"
        }
      }
    },
    {
      "parameters": {},
      "id": "64190c36-ad3a-4420-8680-56e1ed6ba572",
      "name": "Contextual Compression Retriever",
      "type": "@n8n/n8n-nodes-langchain.retrieverContextualCompression",
      "typeVersion": 1,
      "position": [
        3660,
        2000
      ]
    },
    {
      "parameters": {
        "topK": 5
      },
      "id": "d2ec12c1-17d2-4c72-b3dc-5c241f118e4c",
      "name": "Vector Store Retriever",
      "type": "@n8n/n8n-nodes-langchain.retrieverVectorStore",
      "typeVersion": 1,
      "position": [
        3700,
        2140
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.query }}",
        "options": {}
      },
      "id": "b79c8953-0cea-4d47-9fb8-2e103d2b1081",
      "name": "Question and Answer Chain",
      "type": "@n8n/n8n-nodes-langchain.chainRetrievalQa",
      "typeVersion": 1.3,
      "position": [
        3560,
        1860
      ]
    },
    {
      "parameters": {
        "qdrantCollection": {
          "__rl": true,
          "value": "notion_ibox",
          "mode": "list",
          "cachedResultName": "notion_ibox"
        },
        "options": {}
      },
      "id": "f06406b8-931a-4f64-8fe5-9ac2bc4025dd",
      "name": "Qdant Vector Store",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "typeVersion": 1,
      "position": [
        5900,
        1840
      ],
      "credentials": {
        "qdrantApi": {
          "id": "ukGdBAa9ib5xqZKC",
          "name": "william"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "name": "store_info_tool",
        "description": "Use this tool to retrieve information about the company, available plans, how the system works, and frequently asked questions from users.",
        "workflowId": {
          "__rl": true,
          "value": "LS8CfvECZu2puiXb",
          "mode": "list",
          "cachedResultName": "AI 4 iBox"
        }
      },
      "id": "a940b2dc-dc0d-4089-8283-aaa157c3b5a8",
      "name": "Store Info Tool",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        5520,
        1700
      ]
    },
    {
      "parameters": {
        "model": "llama-3.2-90b-vision-preview",
        "options": {
          "temperature": 0
        }
      },
      "id": "12163a13-dc8f-4407-8c51-f35587d57d5c",
      "name": "Groq Chat Model1",
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        3520,
        2200
      ],
      "credentials": {
        "groqApi": {
          "id": "Qc9IFal2C1clPmRn",
          "name": "william"
        }
      }
    },
    {
      "parameters": {
        "model": "text-embedding-3-small",
        "options": {}
      },
      "id": "ea4434ea-00b0-420d-8677-734c2ac96dd4",
      "name": "Embeddings OpenAI1",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1,
      "position": [
        3780,
        2420
      ],
      "credentials": {
        "openAiApi": {
          "id": "dRR3EqW0FEAbSHgt",
          "name": "william"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b49db797-0bdf-457d-8ba0-e7cf175881e5",
              "name": "response",
              "value": "={{ $json.response.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "817847ac-bd41-4eed-ba87-b350991fdb7b",
      "name": "Response WK",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3900,
        1860
      ]
    },
    {
      "parameters": {
        "qdrantCollection": {
          "__rl": true,
          "value": "notion_ibox",
          "mode": "list",
          "cachedResultName": "notion_ibox"
        },
        "options": {}
      },
      "id": "b928c2b7-be5a-4f63-a89d-20a278fc2310",
      "name": "Qdant Vector Store1",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "typeVersion": 1,
      "position": [
        3700,
        2280
      ],
      "credentials": {
        "qdrantApi": {
          "id": "ukGdBAa9ib5xqZKC",
          "name": "william"
        }
      }
    },
    {
      "parameters": {
        "model": "gpt-4o-mini-2024-07-18",
        "options": {
          "temperature": 0.4
        }
      },
      "id": "7f4346b0-aed6-4803-ad4e-618a8f3cc8f2",
      "name": "OpenAI Chat Model1",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        3460,
        2020
      ],
      "credentials": {
        "openAiApi": {
          "id": "dRR3EqW0FEAbSHgt",
          "name": "william"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "675594ce-198a-45d4-b185-4caacb169a93",
              "name": "user_account",
              "value": "={{ $json.user_account }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "id": "fbfa60f4-2827-4898-a2fd-2f0b0ca55fd4",
      "name": "Json2Object",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4420,
        1780
      ]
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "williamkillerca@gmail.com",
          "mode": "list",
          "cachedResultName": "williamkillerca@hotmail.com"
        },
        "start": "={{ $fromAI('date_init', 'sempre a partir do hor√°rio atual') }}",
        "end": "={{ $fromAI('date_end') }}",
        "additionalFields": {
          "description": "={{ $fromAI('description') }}",
          "summary": "={{ $fromAI('summary') }}"
        }
      },
      "id": "ab73e6f1-ef8f-4e14-af2d-e90469983c3c",
      "name": "Google Calendar CE",
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.1,
      "position": [
        5300,
        1840
      ],
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "mQv2XCcAIiyPKV2D",
          "name": "william"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "calendar": {
          "__rl": true,
          "value": "williamkillerca@gmail.com",
          "mode": "list",
          "cachedResultName": "williamkillerca@hotmail.com"
        },
        "eventId": "={{ $fromAI('event_id', 'o id do evento que ser√° cancelado') }}",
        "updateFields": {}
      },
      "id": "b16a7dd6-41a9-4070-a947-577ce4799d8d",
      "name": "Google Calendar UE",
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.1,
      "position": [
        5440,
        1860
      ],
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "mQv2XCcAIiyPKV2D",
          "name": "william"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "williamkillerca@gmail.com",
          "mode": "list",
          "cachedResultName": "williamkillerca@hotmail.com"
        },
        "options": {}
      },
      "id": "22a64455-031f-48ce-a5c1-a73bf21afb97",
      "name": "Google Calendar GE",
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.1,
      "position": [
        5240,
        2000
      ],
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "mQv2XCcAIiyPKV2D",
          "name": "william"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "calendar": {
          "__rl": true,
          "value": "williamkillerca@gmail.com",
          "mode": "list",
          "cachedResultName": "williamkillerca@hotmail.com"
        },
        "eventId": "={{ $fromAI('event_id', 'o id do evento que ser√° cancelado') }}",
        "options": {}
      },
      "id": "5d98f098-4dd6-48bf-9b24-b6c555c1674d",
      "name": "Google Calendar DE",
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.1,
      "position": [
        5380,
        2000
      ],
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "mQv2XCcAIiyPKV2D",
          "name": "william"
        }
      }
    },
    {
      "parameters": {
        "resource": "calendar",
        "calendar": {
          "__rl": true,
          "value": "williamkillerca@gmail.com",
          "mode": "list",
          "cachedResultName": "williamkillerca@hotmail.com"
        },
        "timeMin": "={{ $now.toISO().split('.')[0] }}",
        "timeMax": "={{ $now.plus(5, 'days').toISO().split('.')[0] }}",
        "options": {
          "outputFormat": "availability"
        }
      },
      "id": "20e81209-0f58-4ca1-8105-f555547a0d7e",
      "name": "Google Calendar AC",
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.1,
      "position": [
        5180,
        1860
      ],
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "mQv2XCcAIiyPKV2D",
          "name": "william"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "use essa ferramenta para iniciar o teste com agente configurado para uso nos estabelecimentos registrado na plataforma, confirme sempre antes de ativa-lo e informe que a dura√ß√£o √© de 10 min somente.",
        "operation": "set",
        "key": "=env_{{ $('messageInfo').first().json.unique_id }}_ibox_agent",
        "value": "store",
        "keyType": "string",
        "expire": true,
        "ttl": 600
      },
      "id": "eb965e82-0ddc-478a-bcd9-9e0a8023d068",
      "name": "Test Agent Store",
      "type": "n8n-nodes-base.redisTool",
      "typeVersion": 1,
      "position": [
        5640,
        1720
      ],
      "credentials": {
        "redis": {
          "id": "ePjUcKkuSrLqo1Tt",
          "name": "vps"
        }
      }
    },
    {
      "parameters": {
        "name": "post_status_whatsapp",
        "description": "use essa ferramenta para postar uma mensagem no status do usu√°rio, mas somente ap√≥s a confirma√ß√£o dele, lembre-se de pergunta a cor de fundo e fonte se usu√°rio n√£o tiver informado.\n\n# O texto a ser enviado na precisa ter entre entre 100 e 300 caracteres, voc√™ pode sugerir um alternativa, se ele desejar e aceitar.\n\n# Recomende no m√°ximo 5 linhas com 44 caracteres por linha, mas aceite mais se o usu√°rio deseja.\n\n# Formata√ß√£o de Texto no Status\n* + texto + * = deixa o texto em negrito;\n_ + texto + _ = deixa o texto em it√°lico;\n~+ texto + ~ = deixa o texto sublinhado;",
        "workflowId": {
          "__rl": true,
          "value": "LS8CfvECZu2puiXb",
          "mode": "list",
          "cachedResultName": "AI 4 iBox"
        },
        "fields": {
          "values": [
            {
              "name": "extra",
              "type": "objectValue",
              "objectValue": "={\n    \"tool\": \"post_status_whatsapp\",\n    \"evo_params\": {\n        \"url\": \"{{ $('messageInfo').first().json.evo_api }}\",\n        \"api_key\": \"{{ $('messageInfo').first().json.evo_api_key }}\",\n        \"instance\": \"{{ $('messageInfo').first().json.instance }}\"\n    },\n    \"query\":\n    {\n        \"type\": \"text\",\n        \"caption\": \"\",\n        \"allContacts\": false,\n        \"statusJidList\":\n        [\n            \"{{ $('messageInfo').first().json.remoteJid }}\"\n        ]\n    }\n}"
            },
            {
              "name": "extra.evo_params.url",
              "stringValue": "={{ $('messageInfo').first().json.evo_api }}"
            }
          ]
        },
        "specifyInputSchema": true,
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"content\": {\n      \"type\": \"string\",\n      \"description\": \"texto a ser enviado\"\n    },\n    \"backgroundColor\": {\n      \"type\": \"string\",\n      \"description\": \"cor de fundo a ser usado, sempre enviar como hexadeicmal: #000000\"\n    },\n    \"font\": {\n      \"type\": \"number\",\n      \"description\": \"Escolha entre as fontes mais adequadas ao texto informado, somente se o usu√°rio n√£o especificar uma fonte das op√ß√µes: 1 = SERIF, 2 = NORICAN_REGULAR, 3 = BRYNDAN_WRITE, 4 = BEBASNEUE_REGULAR ou 5 = OSWALD_HEAVY.\"\n    }\n  },\n  \"required\": [\n    \"content\",\n    \"backgroundColor\",\n    \"font\"\n  ]\n}"
      },
      "id": "8fb196bf-7e0e-414f-8ee5-56e9e748da4c",
      "name": "post status whatsapp",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        6280,
        1700
      ],
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "3d3f5973-0888-4a4a-9b95-74a7908fcf4c",
              "leftValue": "={{ $json.query }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "2ae019ad-6ebd-4ebe-b62c-ab819420e419",
      "name": "talk to agent?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3100,
        1320
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "id": "c7fe334f-5faf-49c5-a722-a5d0a2f31b7a",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        5660,
        1320
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('messageInfo').first().json.conversation }}",
        "options": {
          "systemMessage": "={{ $('config prompt').first().json.system }}",
          "returnIntermediateSteps": false
        }
      },
      "id": "af33c65c-bf6b-4151-be1b-b309869354c8",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        5160,
        1380
      ],
      "retryOnFail": true,
      "waitBetweenTries": 3000
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "098d3cb2-41df-4d2a-8640-ef5506938e1d",
              "name": "output",
              "value": "=*{{ $workflow.name }}*:\\n{{ $json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "00ee26a7-c163-42e2-a691-82149e03629d",
      "name": "Sign Msg",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        5500,
        1360
      ]
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-09-27T14:34:01.317Z",
      "updatedAt": "2024-09-27T14:34:01.317Z",
      "id": "ZoTSEGR97fzorfDz",
      "name": "AI"
    },
    {
      "createdAt": "2024-10-08T13:33:46.636Z",
      "updatedAt": "2024-10-08T13:33:46.636Z",
      "id": "aSNW5tPyOIOEr9rS",
      "name": "Agent"
    },
    {
      "createdAt": "2024-09-27T17:42:17.034Z",
      "updatedAt": "2024-09-27T17:42:17.034Z",
      "id": "TsfCA8eZuTObjOfy",
      "name": "Backup"
    }
  ],
  "triggerCount": 3,
  "updatedAt": "2025-01-14T00:06:59.652Z",
  "versionId": "7a7b9537-8e43-47ba-b70e-5fef16e59196"
}