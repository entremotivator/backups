{
  "active": false,
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "baseInfo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Beautify URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "baseInfo": {
      "main": [
        [
          {
            "node": "Message Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Message": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Media": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Beautify URL": {
      "main": [
        [
          {
            "node": "Fix Text 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out Messages": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Send Message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Media",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Categorizing Message with Split Break Line": {
      "main": [
        [
          {
            "node": "Split Out Messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Message Type": {
      "main": [
        [
          {
            "node": "Format Message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Format Message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Format Message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Base64",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Base64",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Message": {
      "main": [
        [
          {
            "node": "Fix Text 1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Base64": {
      "main": [
        [
          {
            "node": "Media Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert To Audio": {
      "main": [
        [
          {
            "node": "Analyze Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert To Image": {
      "main": [
        [
          {
            "node": "Analyze Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Media Type": {
      "main": [
        [
          {
            "node": "Convert To Audio",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Convert To Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Audio": {
      "main": [
        [
          {
            "node": "Format Transcription Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Image": {
      "main": [
        [
          {
            "node": "Format Transcription Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Transcription Audio": {
      "main": [
        [
          {
            "node": "Fix Text 1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Transcription Image": {
      "main": [
        [
          {
            "node": "Fix Text 1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Availability": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Check Unavailability": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "List Events": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Event Details": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Event": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update Event": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Cancel Event": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Primeiro mensagem?": {
      "main": [
        [
          {
            "node": "Aguarda Sec para Processar",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Msgs 1": {
      "main": [
        [
          {
            "node": "Primeiro mensagem?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Msg": {
      "main": [
        [
          {
            "node": "Get Msgs 1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aguarda Sec para Processar": {
      "main": [
        [
          {
            "node": "Get Msgs 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fix Text 1": {
      "main": [
        [
          {
            "node": "Clean Msgs 1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Msgs 2": {
      "main": [
        [
          {
            "node": "Join Msgs",
            "type": "main",
            "index": 0
          },
          {
            "node": "Clean Msgs  2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Join Msgs": {
      "main": [
        [
          {
            "node": "About Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "About Store": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fix Text 2": {
      "main": [
        [
          {
            "node": "Categorizing Message with Split Break Line",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clean Msgs 1": {
      "main": [
        [
          {
            "node": "Save Msg",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-11-05T18:04:59.652Z",
  "id": "kPxlxWthgkfZzqXk",
  "meta": null,
  "name": "Agent Base",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "07dc5c20-167f-4350-9f90-9ffb64106e37",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -2520,
        -100
      ],
      "id": "30973b51-4127-4ded-b2ea-66296d1a81ec",
      "name": "Webhook",
      "webhookId": "5e0a29b7-adae-4936-8293-6866440d983c"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Join Msgs').first().json.output }}",
        "options": {
          "systemMessage": "=Você é um assistente útil.\n\nQue irá responder e tirar duvidas do usuário e poderá realizar agendamentos caso seja solicitado.\n\n<informacoes_adicionais>\n{{ $('About Store').first().json.context }}\n</informacoes_adicionais>"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        560,
        40
      ],
      "id": "97be9f27-4757-48fb-9a72-35c5ad8c20bc",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('baseInfo').item.json.unique_id }}",
        "sessionTTL": 600,
        "contextWindowLength": 15
      },
      "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
      "typeVersion": 1.3,
      "position": [
        560,
        280
      ],
      "id": "a46457a5-3191-42e3-b377-6001484ab50c",
      "name": "Redis Chat Memory",
      "credentials": {
        "redis": {
          "id": "ePjUcKkuSrLqo1Tt",
          "name": "vps"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5f5addd6-12c4-4bbd-bce7-6448e90cb9d0",
              "name": "evo_api",
              "value": "={{ $json.body.server_url ?? '' }}",
              "type": "string"
            },
            {
              "id": "d8fa0cad-0b2f-4e61-8d05-5d29829d0156",
              "name": "instance",
              "value": "={{ $json.body.instance }}",
              "type": "string"
            },
            {
              "id": "e390ea49-44e4-4aa2-8f1f-9044fd4b27f8",
              "name": "remoteJid",
              "value": "={{ $json.body.data.key.remoteJid }}",
              "type": "string"
            },
            {
              "id": "375453f5-c979-48d0-9a77-f2e837c80da5",
              "name": "pushName",
              "value": "={{ $json.body.data.pushName }}",
              "type": "string"
            },
            {
              "id": "c1179eef-b150-4d05-89c1-3b85660ec6bd",
              "name": "fromMe",
              "value": "={{ $json.body.data.key.fromMe }}",
              "type": "boolean"
            },
            {
              "id": "2ca406cb-0c5a-4e69-a005-ba35e81128da",
              "name": "messageType",
              "value": "={{ $json.body.data.messageType }}",
              "type": "string"
            },
            {
              "id": "f9189c75-e206-4c9d-a538-fadff9121f07",
              "name": "unique_id",
              "value": "={{ $json.body.instance }}_{{ $json.body.data.key.remoteJid.split('@')[0] }}",
              "type": "string"
            },
            {
              "id": "c6cd82b0-7666-4391-911e-87e0f132ba7b",
              "name": "evo_api_key",
              "value": "={{ $json.body.apikey ?? '' }}",
              "type": "string"
            },
            {
              "id": "e9629ac7-db67-4779-9a84-489bf033bcef",
              "name": "messageId",
              "value": "={{ $json.body.data.key.id }}",
              "type": "string"
            },
            {
              "id": "18868b31-059f-44b3-8282-cc0f475e691d",
              "name": "body.data",
              "value": "={{ $json.body.data }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "id": "2ad10eb8-4b63-469b-806d-3167d3911c00",
      "name": "baseInfo",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2340,
        -100
      ],
      "alwaysOutputData": false,
      "executeOnce": false
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('baseInfo').first().json.evo_api }}/message/sendText/{{ $('baseInfo').first().json.instance }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"number\": \"{{ $('baseInfo').first().json.remoteJid.split('@')[0] }}\",\n  \"text\": \"*Agente de IA*\\n{{ $json.output.content.replace(/^\\n+/g, '') }}\",\n  \"delay\": {{ Math.floor(Math.max(500, Math.min(($json.output.content.length * (Math.random() * 50 + 150)) * (Math.random() * 0.02 + 0.09), 5000))) }}\n,\n  \"linkPreview\": false\n}",
        "options": {}
      },
      "id": "b03fb237-ec1a-4258-877b-a9202c4380ec",
      "name": "Send Message",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2140,
        -60
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "T5OqvislWbgDr9Ek",
          "name": "Evolution Api Key"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "622ec4c3-e439-4e05-976c-d3c5817b102d",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1640,
        40
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('baseInfo').first().json.evo_api }}/message/sendMedia/{{ $('baseInfo').first().json.instance }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"number\": \"{{ $('baseInfo').first().json.remoteJid.split('@')[0] }}\",\n  \"mediatype\": \"{{ $json.output.type }}\",\n  \"mimetype\": \"image/png\",\n  \"caption\": \"{{ $json.output.caption.replace(/^\\n+/g, '') ?? '' }}\",\n  \"media\": \"{{ $json.output.url }}\",\n  \"fileName\": \"{{ $json.output.url.split('/').last().replace($json.output.url.split('.').last(), 'png') }}\",\n  \"delay\": 2000\n} ",
        "options": {}
      },
      "id": "123860f7-17d4-4b9c-8464-fd1818ed843e",
      "name": "Send Media",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2140,
        100
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "T5OqvislWbgDr9Ek",
          "name": "Evolution Api Key"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Função 1: Remove caption de links que não são imagens ou vídeos\nfunction removeCaptionFromLinks(text) {\n  // Expressão regular para identificar links que não são imagens ou vídeos\n  const regexLinks = /\\[([^\\]]*)\\]\\((https?:\\/\\/[^\\s]+)\\)/gi;\n  \n  return text.replace(regexLinks, (match, caption, url) => {\n    // Se o link não for de imagem ou vídeo, remove o caption e mantém só a URL\n    if (!url.match(/\\.(jpeg|jpg|png|gif|bmp|webp|avif|mp4|mov|avi|wmv)$/i)) {\n      return url;\n    }\n    return match; // Mantém o link inalterado se for uma imagem ou vídeo\n  });\n}\n\nconst message = $input.item.json.output;\n\n// Primeira função: remove captions de links não-imagens/vídeos\ncleanedMessage = removeCaptionFromLinks(message);\n\nreturn { output: cleanedMessage };"
      },
      "id": "16974a97-96bb-49fc-9ae1-eb09fec8b81e",
      "name": "Beautify URL",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        900,
        40
      ],
      "executeOnce": false
    },
    {
      "parameters": {
        "fieldToSplitOut": "output",
        "include": "allOtherFields",
        "options": {}
      },
      "id": "0b39859f-d7e4-4999-9c12-e394abff6cd6",
      "name": "Split Out Messages",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1440,
        40
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.output.type }}",
                    "rightValue": "text",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Texto"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "bd6c6ac4-8ebd-4d14-9935-1fd270106c48",
                    "leftValue": "={{ $json.output.type }}",
                    "rightValue": "image",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Imagem"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "8a8907db-2f29-4fc3-a50d-264a2c5d015e",
                    "leftValue": "={{ $json.output.type }}",
                    "rightValue": "=video",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Video"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "f15e38f0-16e6-4b30-b368-28f0b3c7fe6a",
                    "leftValue": "{{ $json.output.type }}",
                    "rightValue": "Audio",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Audio"
            }
          ]
        },
        "options": {}
      },
      "id": "ec5d0d5a-edc7-4ee7-8e2c-36e8d002e08d",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        1860,
        40
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const message = $input.item.json.output;\n\nconst regex = /(?:\\!\\[([^\\]]*)\\]\\((https?:\\/\\/[^\\s]+?\\.(?:jpeg|jpg|png|gif|bmp|webp|avif))\\))|(?:\\[([^\\]]*)\\]\\((https?:\\/\\/[^\\s]+?\\.(?:jpeg|jpg|png|gif|bmp|webp|avif))\\))|(?:\\((https?:\\/\\/[^\\s]+?\\.(?:jpeg|jpg|png|gif|bmp|webp|avif))\\))|((https?:\\/\\/[^\\s]+?\\.(?:jpeg|jpg|png|gif|bmp|webp|avif)))/gi;\n\nconst parts = [];\nlet lastIndex = 0;\nlet match;\n\nwhile ((match = regex.exec(message)) !== null) {\n  // Adiciona o texto entre os matches\n  if (match.index > lastIndex) {\n    let content = message.slice(lastIndex, match.index).replace(/^(\\\\n)+|(\\\\n)+$/g, '').trim();\n    // Remove o '-' desnecessário no final do texto, se presente\n    if (content.endsWith('-')) {\n      content = content.slice(0, -1).trim();\n    }\n    if (content) {\n      // Quebra o texto com base em '\\n\\n'\n      const splitContent = content.split('\\\\n\\\\n');\n      splitContent.forEach(text => {\n        text = text.replace(/^(\\\\n)+|(\\\\n)+$/g, '').trim();\n        if (text) {\n          parts.push({ type: 'text', content: text });\n        }\n      });\n    }\n  }\n\n  // Adiciona as imagens ou links encontrados\n  if (match[1]) {\n    parts.push({ type: 'image', caption: match[1], url: match[2] });\n  } else if (match[3]) {\n    parts.push({ type: 'image', caption: match[3], url: match[4] });\n  } else if (match[5] || match[6]) {\n    parts.push({ type: 'image', url: match[5] || match[6] });\n  }\n\n  // Atualiza o último índice processado\n  lastIndex = regex.lastIndex;\n}\n\n// Adiciona o texto final, se houver\nif (lastIndex < message.length) {\n  let finalContent = message.slice(lastIndex).replace(/^(\\\\n)+|(\\\\n)+$/g, '').trim();\n  if (finalContent.endsWith('-')) {\n    finalContent = finalContent.slice(0, -1).trim();\n  }\n  if (finalContent) {\n    // Quebra o texto final com base em '\\n\\n'\n    const splitFinalContent = finalContent.split('\\\\n\\\\n');\n    splitFinalContent.forEach(text => {\n      text = text.replace(/^(\\\\n)+|(\\\\n)+$/g, '').trim();\n      if (text) {\n        parts.push({ type: 'text', content: text });\n      }\n    });\n  }\n}\n\n// Verifica se a parte é um vídeo e adiciona\nparts.forEach(part => {\n  if (part.type === 'url' && part.url.match(/\\.(mp4|mov|avi|wmv)$/)) {\n    part.type = 'video';\n  }\n});\n\n// Loop para corrigir o '!' antes dos links que não são imagens\nparts.forEach(part => {\n  if (part.type === 'text') {\n    part.content = part.content.replace(/!\\s*(https?:\\/\\/[^\\s]+)/g, '$1');\n  }\n});\n\nreturn { output: parts };"
      },
      "id": "8e50cca6-df9f-4570-8cd3-4484fdf7249b",
      "name": "Categorizing Message with Split Break Line",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1260,
        40
      ],
      "executeOnce": false
    },
    {
      "parameters": {
        "amount": 0.2
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2340,
        60
      ],
      "id": "cf3a2a71-29b5-467e-a27b-fda152eeac61",
      "name": "Wait",
      "webhookId": "2f2f13df-83c8-4769-9f08-e13ef9589280"
    },
    {
      "parameters": {
        "model": "llama-3.2-90b-text-preview",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        400,
        260
      ],
      "id": "56326c75-fdff-41e8-be08-5572b3e6686c",
      "name": "Groq Chat Model",
      "credentials": {
        "groqApi": {
          "id": "Qc9IFal2C1clPmRn",
          "name": "william"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('baseInfo').first().json.messageType }}",
                    "rightValue": "conversation",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "conversation"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "86e7e773-8586-458f-a1fb-2890f2030230",
                    "leftValue": "={{ $('baseInfo').first().json.messageType }}",
                    "rightValue": "extendedTextMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "msg"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "7f108034-a1be-4e90-b42e-e4f8a719e311",
                    "leftValue": "={{ $('baseInfo').first().json.messageType }}",
                    "rightValue": "editedMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "msg edited"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "256e7cf8-be54-4c41-ba80-2d9eb0a07563",
                    "leftValue": "={{ $('baseInfo').first().json.messageType }}",
                    "rightValue": "audioMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "audio"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "da03e413-3422-419c-af1a-71ff87c307e2",
                    "leftValue": "={{ $('baseInfo').first().json.messageType }}",
                    "rightValue": "imageMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "image"
            }
          ]
        },
        "options": {}
      },
      "id": "96192913-84a3-4b0a-8fed-fac127c6f127",
      "name": "Message Type",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        -2160,
        -140
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const data = $('baseInfo').first().json.body.data;\nlet response = '';\n\nconst conversation = data.message.conversation;\nconst quotedMessage = data.contextInfo?.quotedMessage?.extendedTextMessage?.text;\nconst editedMessage = data.message.editedMessage?.message?.protocolMessage?.editedMessage?.extendedTextMessage?.text;\n\nif (quotedMessage) {\n  response = `Menção: ${quotedMessage}, Mensagem: ${conversation}`;\n} else if (editedMessage) {\n  response = `${editedMessage}*`;\n} else {\n  response = conversation;\n}\n\nreturn { output: response };"
      },
      "id": "963cd5f8-d40d-4631-9c79-a96ca26c086d",
      "name": "Format Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1300,
        -100
      ]
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "binaryPropertyName": "=data",
        "options": {
          "language": "pt"
        }
      },
      "id": "f5d2274c-861a-4d76-9dfb-b521b3e7231a",
      "name": "Analyze Audio",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.3,
      "position": [
        -1500,
        60
      ],
      "retryOnFail": true,
      "maxTries": 5,
      "waitBetweenTries": 5000,
      "credentials": {
        "openAiApi": {
          "id": "dRR3EqW0FEAbSHgt",
          "name": "william"
        }
      }
    },
    {
      "parameters": {
        "resource": "image",
        "operation": "analyze",
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini-2024-07-18",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI-2024-07-18"
        },
        "text": "Descreva todo o conteúdo da imagem, sem Acentos e sem hífens",
        "inputType": "base64",
        "options": {}
      },
      "id": "77c2eda6-fc7e-4260-b8db-893e4c3242dd",
      "name": "Analyze Image",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.4,
      "position": [
        -1500,
        220
      ],
      "alwaysOutputData": true,
      "credentials": {
        "openAiApi": {
          "id": "dRR3EqW0FEAbSHgt",
          "name": "william"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('baseInfo').first().json.evo_api }}/chat/getBase64FromMediaMessage/{{ $('baseInfo').first().json.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('baseInfo').first().json.evo_api_key }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"message\": {\"key\": {\"id\": \"{{ $('baseInfo').first().json.messageId }}\"}},\n  \"convertToMp4\": false\n}",
        "options": {}
      },
      "id": "32871383-292b-4a90-9d21-ef9cb37c3ef6",
      "name": "Get Base64",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2160,
        140
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.mediaType }}",
                    "rightValue": "audioMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "audio"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "bba31f6b-7dc3-4dac-a090-c38d70065d40",
                    "leftValue": "={{ $json.mediaType }}",
                    "rightValue": "imageMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "image"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra",
          "renameFallbackOutput": "do nothing"
        }
      },
      "id": "4fe3d527-a507-4cb7-9feb-dd858dd16dbf",
      "name": "Media Type",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -1960,
        140
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "base64",
        "options": {
          "fileName": "transcricao.ogg",
          "mimeType": "audio/ogg"
        }
      },
      "id": "f284cd55-b1ce-4eee-a55b-eb586b080847",
      "name": "Convert To Audio",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -1700,
        60
      ]
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "base64",
        "options": {
          "fileName": "imagem.jpeg",
          "mimeType": "image/jpeg"
        }
      },
      "id": "f85b922d-7405-4b6b-882a-711c7bb640e5",
      "name": "Convert To Image",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -1700,
        220
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const data = $('baseInfo').first().json.body.data;\nconst caption = data.message?.imageMessage?.caption;\nconst content = $input.item.json.content;\nlet response = '';\n\n// Verifica se o conteúdo existe\nif (content) {\n  response = caption\n    ? `${content} Legenda: ${caption}`\n    : `Transcrição: ${content}`;\n} else {\n  response = 'Erro: json.content ausente para imagem com legenda';\n}\n\nreturn { output: response };"
      },
      "id": "a903f16c-931e-4575-ab56-7f9b3ed0af6a",
      "name": "Format Transcription Image",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1300,
        220
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const content = $input.item.json.text;\nlet response = '';\n\n// Verifica se o conteúdo existe\nif (content) {\n  response = `Transcrição: ${content}`;\n} else {\n  response = 'Erro: json.content ausente para aúdio';\n}\n\nreturn { output: response };"
      },
      "id": "f3ec995e-9c97-4fa1-b966-164979388da6",
      "name": "Format Transcription Audio",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1300,
        60
      ]
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Call this tool to return a list of events. Ask the user for the date of the existing reservation. Use the user's date to search for the existing reservation. If the user's date does not match the results or no results are returned, the existing reservation was not found.\n\nIf the tool returns an empty response, it means something went wrong. It does not mean there is no downtime.",
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "williamkillerca@gmail.com",
          "mode": "list",
          "cachedResultName": "williamkillerca@hotmail.com"
        },
        "limit": 30,
        "options": {
          "timeMin": "={{ $fromAI('date_after', 'somente se for informado') }}",
          "timeMax": "={{ $fromAI('date_before', 'somente se for informado') }}",
          "fields": "items(id,status,htmlLink,created,summary,description,creator,organizer,start(dateTime),end(dateTime),hangoutLink)"
        }
      },
      "id": "a8950b52-e05b-4031-ac33-2213054d55d7",
      "name": "List Events",
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.1,
      "position": [
        1120,
        440
      ],
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "mQv2XCcAIiyPKV2D",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Call this tool to get the calendar availability for a particular period on the calendar. The tool may refer to availability as \"Free\" or \"Busy\".\n\nIf the tool returns an empty response, it means that something went wrong. It does not mean that there is no availability.",
        "resource": "calendar",
        "calendar": {
          "__rl": true,
          "value": "williamkillerca@gmail.com",
          "mode": "list",
          "cachedResultName": "williamkillerca@hotmail.com"
        },
        "timeMin": "={{ $fromAI('startTime', 'format 2024-10-27T23:48:34', 'string') }}",
        "timeMax": "={{ $fromAI('endTime', 'format 2024-10-27T23:48:34', 'string') }}",
        "options": {
          "outputFormat": "availability"
        }
      },
      "id": "df177821-b50c-42ab-9f67-f50f3e8fcdb9",
      "name": "Check Availability",
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.1,
      "position": [
        820,
        440
      ],
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "mQv2XCcAIiyPKV2D",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Call this tool to get the calendar unavailability for a particular period on the calendar. The tool may refer to unavailability as \"Busy\".\n\nIf the tool returns an empty response, it means that something went wrong. It does not mean that there is no unavailability.",
        "resource": "calendar",
        "calendar": {
          "__rl": true,
          "value": "williamkillerca@gmail.com",
          "mode": "list",
          "cachedResultName": "william"
        },
        "timeMin": "={{ $fromAI('startTime', 'format 2024-10-27T23:48:34', 'string') }}",
        "timeMax": "={{ $fromAI('endTime', 'format 2024-10-27T23:48:34', 'string') }}",
        "options": {
          "outputFormat": "bookedSlots"
        }
      },
      "id": "d37ae758-3d64-4b78-b931-4f86171cc5aa",
      "name": "Check Unavailability",
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.1,
      "position": [
        980,
        440
      ],
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "mQv2XCcAIiyPKV2D",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Call this tool to return details of an event using the listed event ID. If you don't know the ID at this time, please note that you need to list it first before you can return details of a listed event.\n\nIf the tool returns an empty response, it means something went wrong. It doesn't mean there's no downtime.",
        "operation": "get",
        "calendar": {
          "__rl": true,
          "value": "williamkillerca@gmail.com",
          "mode": "list",
          "cachedResultName": "williamkillerca@hotmail.com"
        },
        "eventId": "{{ $fromAI('id') }}",
        "options": {
          "maxAttendees": 10
        }
      },
      "id": "ff9433f2-544e-4315-a1f3-cf2d0ee9a825",
      "name": "Get Event Details",
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.1,
      "position": [
        820,
        620
      ],
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "mQv2XCcAIiyPKV2D",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Call this tool to create an event. Always ask for confirmation of the event data to be created before finalizing its creation.\n\nIf the tool returns an empty response, it means that something went wrong. This does not mean that there is no downtime.",
        "calendar": {
          "__rl": true,
          "value": "williamkillerca@gmail.com",
          "mode": "list",
          "cachedResultName": "williamkillerca@hotmail.com"
        },
        "start": "={{ $fromAI('date_init', 'sempre a partir do horário atual') }}",
        "end": "={{ $fromAI('date_end') }}",
        "additionalFields": {
          "attendees": [],
          "description": "={{ $fromAI('description') }}",
          "summary": "={{ $fromAI('summary') }}"
        }
      },
      "id": "0c49f36d-dd6c-4c12-b9e8-6c04d4bade30",
      "name": "Create Event",
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.1,
      "position": [
        980,
        620
      ],
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "mQv2XCcAIiyPKV2D",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Call this tool to update an event. Always ask for confirmation of the event data to be updated before finalizing your change.\n\nIf the tool returns an empty response, it means something went wrong. This does not mean there is no downtime.",
        "operation": "update",
        "calendar": {
          "__rl": true,
          "value": "williamkillerca@gmail.com",
          "mode": "list",
          "cachedResultName": "williamkillerca@hotmail.com"
        },
        "eventId": "={{ $fromAI('id') }}",
        "updateFields": {
          "description": "={{ $fromAI('description') }}",
          "end": "={{ $fromAI('date_end') }}",
          "start": "={{ $fromAI('date_init', 'sempre a partir do horário atual') }}",
          "summary": "={{ $fromAI('summary') }}"
        }
      },
      "id": "b0a80245-70cd-4565-968b-4e4d2cfb4396",
      "name": "Update Event",
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.1,
      "position": [
        1120,
        620
      ],
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "mQv2XCcAIiyPKV2D",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "calendar": {
          "__rl": true,
          "value": "williamkillerca@gmail.com",
          "mode": "list",
          "cachedResultName": "williamkillerca@hotmail.com"
        },
        "eventId": "={{ $fromAI('id') }}",
        "options": {}
      },
      "id": "39efc961-ae1a-4a33-9f3b-b398e38e53bb",
      "name": "Cancel Event",
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.1,
      "position": [
        1260,
        440
      ],
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "mQv2XCcAIiyPKV2D",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "resource": "calendar",
        "calendar": {
          "__rl": true,
          "value": "williamkillerca@gmail.com",
          "mode": "list",
          "cachedResultName": "williamkillerca@gmail.com"
        },
        "timeMin": "2024-11-05T20:08:38",
        "timeMax": "2024-11-05T20:08:39",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.2,
      "position": [
        900,
        -160
      ],
      "id": "db405dad-ee67-4780-9707-6bdeedf71e00",
      "name": "Google Calendar",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "mQv2XCcAIiyPKV2D",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f80ab0b6-a90e-42b0-b68f-b4fd5d0b8027",
              "leftValue": "={{ $json.messages.length }}",
              "rightValue": 1,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -380,
        60
      ],
      "id": "09e4a4b2-6877-42d5-90ab-14dd2a4298b3",
      "name": "Primeiro mensagem?"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "messages",
        "key": "={{ $('baseInfo').item.json.unique_id }}",
        "keyType": "list",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -540,
        60
      ],
      "id": "600ad62a-e346-40c3-af42-efa201a1815e",
      "name": "Get Msgs 1",
      "credentials": {
        "redis": {
          "id": "ePjUcKkuSrLqo1Tt",
          "name": "vps"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "messages",
        "key": "={{ $('baseInfo').item.json.unique_id }}",
        "keyType": "list",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        20,
        40
      ],
      "id": "955ba520-585e-4fb0-afba-37af019205e9",
      "name": "Get Msgs 2",
      "credentials": {
        "redis": {
          "id": "ePjUcKkuSrLqo1Tt",
          "name": "vps"
        }
      }
    },
    {
      "parameters": {
        "operation": "push",
        "list": "={{ $('baseInfo').item.json.unique_id }}",
        "messageData": "={{ $json.output }}",
        "tail": true
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -700,
        60
      ],
      "id": "92b98fc6-25dc-40f2-a2f2-f470e98b4a68",
      "name": "Save Msg",
      "credentials": {
        "redis": {
          "id": "ePjUcKkuSrLqo1Tt",
          "name": "vps"
        }
      }
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -160,
        40
      ],
      "id": "bf286e01-1f4c-4263-b4f7-73e9fed9aabd",
      "name": "Aguarda Sec para Processar",
      "webhookId": "90a8e0f8-8bd6-431a-9255-f87374a68a41"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "75d6e859-8379-4a34-8daf-b34c6a450a09",
              "name": "output",
              "value": "={{ $json.output.replaceAll('\\n', '\\\\n').replaceAll('**', '*') }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "a7e16876-ae91-455b-b22c-b454bc794cca",
      "name": "Fix Text 1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1020,
        60
      ],
      "executeOnce": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "75d6e859-8379-4a34-8daf-b34c6a450a09",
              "name": "output",
              "value": "={{ $json.messages.join('\\n') }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "24f28d6d-c1a4-4e38-88ca-7c396990f914",
      "name": "Join Msgs",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        200,
        40
      ],
      "executeOnce": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "896cbd14-03cd-4be6-8f2b-671166c42382",
              "name": "context",
              "value": "=Nós somos a FARO oferecemos oportunidade única para as pessoas se tornarem engenheiro, há +16 anos transformando vidas por meio da educação.\n\nCom nosso programa de Análise Curricular, facilitamos sua transição para a graduação em Engenharia, permitindo que você avance em sua formação acadêmica e profissional de forma eficiente e eficaz.\n\nPara efetuar a Análise Curricular é preciso dos seguintes documentos: histórico, diploma, rg, cpf, certidão de nascimento ou casamento, comprovante.\n\nSuporte humanizado é das 08:00 ás 10:00 de segunda a sexta, sábado e domingo não atendemos.\n\nNosso instagram é https://www.instagram.com/faculdadefaro_\n\nA inscrição para nosso vestibular deve ser feita acessando https://faroroseira.edu.br/vestibular, lá você encontrará mais informações.\n\nPassos:\nInscrição: Para participar, inscreva-se para o Vestibular Tradicional.\nVestibular: No dia do vestibular, você deverá acessar o link da sua prova que será enviado para o seu e-mail.\nMatrícula: Após finalizar a prova, você poderá antecipar a sua matrícula por WhatsApp e garantir condições especiais.\nResultado: Depois é só conferir o resultado de sua prova na Área do Candidato!\n\nOferecemos 18 cursos para graduação e 111 para pós-graduação\n\nCursos de Graduação\nARQUITETURA E URBANISMO\nDIREITO\nENFERMAGEM\nENGENHARIA AMBIENTAL E SANITÁRIA\nENGENHARIA CIVIL\nENGENHARIA DE ENERGIA\nENGENHARIA ELÉTRICA\nENGENHARIA MECÂNICA\nENGENHARIA QUÍMICA\nESTÉTICA E COSMÉTICA\nFARMÁCIA\nFISIOTERAPIA\nGESTÃO AMBIENTAL\nGESTÃO DE RECURSOS HUMANOS\nMANUTENÇÃO INDUSTRIAL\nMEDICINA VETERINÁRIA\nPSICOLOGIA\nSANEAMENTO AMBIENTAL\n\nCursos de Pós-Graduação (Especializações)\nAdministração de Recursos Humanos\nAdministração Hospitalar\nAdministração Patrimonial em Organizações Públicas\nAdministração Pública\nAlfabetização e Letramento e a Psicopedagogia Institucional\nAprendizado de Máquina\nAuditoria, Compliance e Gestão de Riscos\nCiências da Educação\nCiências de Dados e Big Data Analytics\nCompreensão de Textos e Tradução da Língua Espanhola\nContabilidade, Perícia e Auditoria\nContabilidade Pública\nCultura e Literatura\nDireito Administrativo\nDIREITO CIVIL E PROCESSUAL CIVIL\nDireito Constitucional\nDireito de Família e Sucessões\nDireito do Trabalho e Previdenciário\nDireito Empresarial\nDireito e Processo Penal\nDireito Material e Processual do Trabalho\nDireito Processual Civil\nDireitos Humanos\nDireito Tributário\nDocência do Ensino Técnico e Superior\nEducação Especial com Ênfase em Deficiência Auditiva\nEducação Especial com Ênfase em Deficiência Física\nEducação Especial com Ênfase em Deficiência Intelectual\nEducação Especial com Ênfase em Transtornos Globais do Desenvolvimento\nEducação Especial e Inclusiva\nEducação Especial e Psicomotricidade\nEducação Física na Escola\nEducação Infantil\nEducação, Política e Sociedade\nEngenharia Ambiental e Saneamento Básico\nEngenharia da Qualidade.\nENGENHARIA DA QUALIDADE\nEngenharia de Combate de Incêndio\nEngenharia de Estruturas\nEngenharia de Produção\nEngenharia de Redes de Computadores\nEngenharia de Redes e Sistemas de Telecomunicação\nEngenharia de Segurança do Trabalho\nEngenharia de Software\nEspecialização em Engenharia Civil e Produção\nEspecialização em Engenharia de Pesca\nEspecialização em Engenharia de Produção\nEspecialização em Engenharia de Software\nEspecialização em Engenharia em Florestal\nEspecialização em Engenharia em Segurança do Trabalho\nEspecialização em Engenharia Produção Mecânica\nGestão Comercial\nGestão das Políticas Sociais\nGestão de Contratos\nGestão de Custos e Formação de Preços\nGestão de Obras, Qualidade e Desempenho das Construções\nGestão de Projetos Sociais\nGestão e Auditoria Hospitalar\nGestão e Organização da Escola com ênfase em Direção Escolar\nGestão Escolar\nGestão Escolar: Orientação e Supervisão\nGestão Estratégica de Compras\nGestão, Organização e Supervisão da Escola com ênfase em Coordenação e Direção Escolar\nHarmonização Facial e Corporal\nLibras e Educação para Surdos\nLíngua Portuguesa\nLíngua Portuguesa: redação e oratória\nLiteratura Contemporânea\nLogística Industrial\nMarketing e Gestão de Clientes\nMarketing e Varejo\nMBA em Administração Hospitalar\nMBA em Comunicação Corporativa\nMBA em Gestão Comercial de Produtos e Serviços de Instituições Financeiras\nMBA EM GESTÃO DE PESSOAS\nMBA em Gestão Estratégica em Compras\nMBA em Gestão Financeira\nMBA EM SAÚDE DA FAMILIA\nMBA Gestão de Projetos\nMBA Gestão Financeira e Controladoria\nMBA GESTÃO INDUSTRIAL\nMetodologia do Ensino de Língua Inglesa\nMetodologias Ativas e Prática Docente\nNeuropsicopedagogia\nNUTRICAO E DIETÉTICA\nOdontologia em Saúde Coletiva: Ênfase em Saúde da Família e Comunidade\nOrientação Educacional\nOrientação, Supervisão e Inspeção Escolar\nPedagogia\nPedagogia Empresarial e Educação Corporativa\nPedagogia Social e Gestão de Projetos Sociais\nPerícia Contábil\nPolítica Aplicada ao Direito\nPolítica e Sociedade\nPolíticas e Gestão em Segurança Pública\nPsicomotricidade\nPsicopedagogia\nPsicopedagogia Clinica e Institucional\nPsicopedagogia Institucional\nRecursos Humanos: Rotinas e Cálculos Trabalhistas\nSAUDE DA FAMILIA\nSAÚDE DA FAM´LIA\nSegurança da Informação\nSupervisão e Orientação Educacional\nSupervisão Escolar\nSustentabilidade Empresarial\nTecnologias e Educação a Distância\nTradução, Interpretação e Guia-Interpretação de Língua Brasileira de Sinais - Libras\nTutoria em Educação a Distância\nXXIII. Literatura Brasileira\nXXV. Literatura em Língua Inglesa\n\nPerguntas Frequentes\nAqui estão todas as informações necessárias para você tirar suas dúvidas sobre nosso processo de ensino.\n\nO que é ProUni?\nO Prouni – Programa Universidade para Todos – é um sistema que faz concede bolsas de estudo integrais e parciais de 50% em instituições privadas de educação superior, em cursos de graduação e sequenciais de formação específica a estudantes brasileiros, desde que ainda não tenham diploma de nível superior.\n\nFiz o ENEM há 2 anos, posso tentar o ProUni?\nNão. O Prouni só aceita a nota do Enem do ano anterior ao processo de concessão da bolsa.\n\nQual a menor nota aceita para solicitar o ProUni?\nSua nota tem que ser de no mínimo de 450 pontos e você não pode ter zerado a redação.\n\nPosso solicitar o ProUni antes de concluir o ensino médio?\nNão. É necessário ter cursado as 3 séries do ensino médio.\n\nO ProUni é concedido em caso de segunda graduação?\nNão. O Prouni é exclusivo para quem não possui nível superior completo.",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        380,
        40
      ],
      "id": "c5ee00b6-8171-4a13-a133-ad1010e6b0b0",
      "name": "About Store"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "75d6e859-8379-4a34-8daf-b34c6a450a09",
              "name": "output",
              "value": "={{ $json.output.replaceAll('\\n', '\\\\n').replaceAll('**', '*').replace(/(?<!\\\\)\"/g, '\\\\\"') }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "081435a2-0e09-4f58-88b1-0a9497bc375c",
      "name": "Fix Text 2",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1080,
        40
      ]
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "={{ $('baseInfo').item.json.unique_id }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -860,
        60
      ],
      "id": "0107b5d5-135f-4aa9-b2ef-4ce78e61a47a",
      "name": "Clean Msgs 1",
      "credentials": {
        "redis": {
          "id": "ePjUcKkuSrLqo1Tt",
          "name": "vps"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "={{ $('baseInfo').item.json.unique_id }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        200,
        -160
      ],
      "id": "4219b77a-ead8-4d1f-aab0-0c8d6a843b84",
      "name": "Clean Msgs  2",
      "credentials": {
        "redis": {
          "id": "ePjUcKkuSrLqo1Tt",
          "name": "vps"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "896cbd14-03cd-4be6-8f2b-671166c42382",
              "name": "context",
              "value": "=# Bow 360 - Agência de Marketing Digital\n\n## Serviços Oferecidos:\n1. **Tráfego Pago**: Serviços de otimização e gestão de campanhas de tráfego pago em diferentes plataformas.\n2. **Social Media**: Gestão e otimização de redes sociais para aumentar o engajamento e seguidores.\n3. **Produção de Conteúdo**: Criação de conteúdo digital para blogs, redes sociais e outros meios.\n4. **Automação de Marketing**: Implementação de ferramentas automatizadas para facilitar campanhas e fluxos de trabalho de marketing.\n5. **Chatbot e Inteligência Artificial**: Desenvolvimento de chatbots e soluções de IA para suporte ao cliente e automação.\n6. **Criação de Sites e Lojas Virtuais**: Desenvolvimento de websites personalizados e plataformas de e-commerce.\n\n## Análise de Marketing Gratuita:\n- A Bow 360 oferece uma análise gratuita e personalizada da presença digital de empresas, com vagas limitadas (apenas 5 análises gratuitas por semana).\n- A análise é destinada a empresas que enfrentam dificuldades com leads, vendas ou retorno de investimento em suas estratégias de marketing.\n\n## Cidades de Atuação:\n1. São Paulo\n2. Rio de Janeiro\n3. Santa Catarina\n\n## Contatos:\n- **Telefone SP**: +55 11 98433-5327\n- **Telefone RJ**: +55 21 96470-8696\n- **Telefone SC**: +55 47 9214-0964\n- **Email**: contato@agenciabow360.com.br\n\n## Redes Sociais:\n- Instagram: https://www.instagram.com/agenciabow360/\n- Facebook: https://es-la.facebook.com/agenciabow360/\n- Youtube: https://www.youtube.com/@AgenciaBow\n\n## Mensagem Central:\nA agência Bow 360 se especializa em ajudar empresas a otimizar suas estratégias de marketing digital, focando na melhoria de SEO, tráfego pago, produção de conteúdo e social media para aumentar o engajamento, geração de leads e vendas.\n\n---\n\n## Exemplos de Perguntas que o Agente de IA pode responder:\n1. Quais serviços a Bow 360 oferece?\n2. Como posso agendar uma análise gratuita da minha presença digital?\n3. Quantas análises gratuitas são oferecidas por semana?\n4. Em quais cidades a Bow 360 está presente?\n5. Como entrar em contato com a Bow 360?\n6. Quais são as soluções de marketing oferecidas pela Bow 360 para empresas?\n7. Como a Bow 360 pode ajudar a melhorar a minha presença digital?\n8. Quais ferramentas de automação de marketing vocês utilizam?\n9. O que está incluído na produção de conteúdo da Bow 360?",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        520,
        -180
      ],
      "id": "a1f00fa6-f2fe-492b-8f1b-5a6aafce8577",
      "name": "About Store1"
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "connection": "keep-alive",
            "host": "n8n.wmst.com.br",
            "x-forwarded-scheme": "https",
            "x-forwarded-proto": "https",
            "x-forwarded-for": "10.0.0.2",
            "x-real-ip": "10.0.0.2",
            "content-length": "1105",
            "content-type": "application/json",
            "user-agent": "axios/1.7.7",
            "accept-encoding": "gzip, compress, deflate, br"
          },
          "params": {},
          "query": {},
          "body": {
            "event": "messages.upsert",
            "instance": "ibox_cli_23",
            "data": {
              "key": {
                "remoteJid": "5512982184879@s.whatsapp.net",
                "fromMe": false,
                "id": "3EB0DC0C44BB7C82B431C1"
              },
              "pushName": "W.M. Soluções Tecnologicas",
              "status": "DELIVERY_ACK",
              "message": {
                "messageContextInfo": {
                  "deviceListMetadata": {
                    "senderKeyHash": "p6VXvj8+KRj4iQ==",
                    "senderTimestamp": "1730819430",
                    "senderAccountType": "E2EE",
                    "receiverAccountType": "E2EE",
                    "recipientKeyHash": "b+ANv/ZB0PNduA==",
                    "recipientTimestamp": "1730680569"
                  },
                  "deviceListMetadataVersion": 2,
                  "messageSecret": "BNLraYCEFDfHr6nDIsLJO+pLZzaI3IMM5KoDoXY+iWk="
                },
                "conversation": "oi"
              },
              "contextInfo": {
                "ephemeralSettingTimestamp": "1719835382",
                "disappearingMode": {
                  "initiator": "CHANGED_IN_CHAT",
                  "trigger": "CHAT_SETTING"
                }
              },
              "messageType": "conversation",
              "messageTimestamp": 1730943375,
              "instanceId": "aa1d2c6f-9a7f-489b-accc-ff1c46a36a23",
              "source": "web"
            },
            "destination": "https://n8n.wmst.com.br/webhook-test/07dc5c20-167f-4350-9f90-9ffb64106e37",
            "date_time": "2024-11-06T22:36:16.191Z",
            "sender": "5512982471939@s.whatsapp.net",
            "server_url": "https://apiwp.wmst.com.br",
            "apikey": "3D48F896-1228-4268-8F5D-4200DA4C3661"
          },
          "webhookUrl": "https://webhook.n8n.wmst.com.br/webhook-test/07dc5c20-167f-4350-9f90-9ffb64106e37",
          "executionMode": "test"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-09-27T17:42:17.034Z",
      "updatedAt": "2024-09-27T17:42:17.034Z",
      "id": "TsfCA8eZuTObjOfy",
      "name": "Backup"
    },
    {
      "createdAt": "2024-11-05T21:12:10.728Z",
      "updatedAt": "2024-11-07T01:46:12.483Z",
      "id": "jdkL0lgb2e5gg7hL",
      "name": "Clients"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-11-08T23:32:48.954Z",
  "versionId": "ddf82418-10c0-4c77-8cd3-2c24895da387"
}