{
  "active": false,
  "connections": {
    "Get Image URL": {
      "main": [
        [
          {
            "node": "Download Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Audio": {
      "main": [
        [
          {
            "node": "Audio Transcriber",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Image": {
      "main": [
        [
          {
            "node": "Image Explainer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get User's Message": {
      "main": [
        [
          {
            "node": "Frank's Assistant",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Text": {
      "main": [
        [
          {
            "node": "Text Summarizer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WhatsApp Trigger1": {
      "main": [
        [
          {
            "node": "Split out message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model5": {
      "ai_languageModel": [
        [
          {
            "node": "Image Explainer",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Text Summarizer",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Audio Transcriber": {
      "main": [
        [
          {
            "node": "Get User's Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "Frank's Assistant",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Vector Store Tool": {
      "ai_tool": [
        [
          {
            "node": "Frank's Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "n8n_demo",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Frank's Assistant",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Vector Store Tool",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "n8n_demo": {
      "ai_vectorStore": [
        [
          {
            "node": "Vector Store Tool",
            "type": "ai_vectorStore",
            "index": 0
          }
        ]
      ]
    },
    "Get Audio URL": {
      "main": [
        [
          {
            "node": "Download Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SerpAPI": {
      "ai_tool": [
        [
          {
            "node": "Frank's Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Split out message": {
      "main": [
        [
          {
            "node": "Identify and ReRoute Message Types",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Calendar Events": {
      "ai_tool": [
        [
          {
            "node": "Frank's Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Calendar Events": {
      "ai_tool": [
        [
          {
            "node": "Frank's Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Recieve Multiple Emails": {
      "ai_tool": [
        [
          {
            "node": "Frank's Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create and Approve Email": {
      "ai_tool": [
        [
          {
            "node": "Frank's Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Identify and ReRoute Message Types": {
      "main": [
        [
          {
            "node": "Get Audio URL",
            "type": "main",
            "index": 0
          }
        ],
        [],
        [
          {
            "node": "Get Image URL",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Frank's Assistant": {
      "main": [
        [
          {
            "node": "Respond to User",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Image Explainer": {
      "main": [
        [
          {
            "node": "Get User's Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text Summarizer": {
      "main": [
        [
          {
            "node": "Get User's Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-01-13T03:57:14.841Z",
  "id": "AkGYQwIQDNZkqnVZ",
  "meta": null,
  "name": "Whatâ€™s app ceo",
  "nodes": [
    {
      "parameters": {
        "resource": "media",
        "operation": "mediaUrlGet",
        "mediaGetId": "={{ $json.audio.id }}",
        "requestOptions": {}
      },
      "id": "14f5f948-2cfb-47c1-85e5-11e382922be6",
      "name": "Get Audio URL",
      "type": "n8n-nodes-base.whatsApp",
      "position": [
        0,
        0
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "media",
        "operation": "mediaUrlGet",
        "mediaGetId": "={{ $json.image.id }}",
        "requestOptions": {}
      },
      "id": "bc608b68-4c20-4d85-a64d-08299ddc5e09",
      "name": "Get Image URL",
      "type": "n8n-nodes-base.whatsApp",
      "position": [
        20,
        220
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "whatsAppApi",
        "options": {}
      },
      "id": "815d3313-1a02-42ee-9506-ed8cef8cb01b",
      "name": "Download Audio",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        300,
        0
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "whatsAppApi",
        "options": {}
      },
      "id": "5320ec42-4568-4074-a15b-b80d60c263d9",
      "name": "Download Image",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        180,
        220
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d990cbd6-a408-4ec4-a889-41be698918d9",
              "name": "message_type",
              "type": "string",
              "value": "={{ $('Split out message').item.json.type }}"
            },
            {
              "id": "23b785c3-f38e-4706-80b7-51f333bba3bd",
              "name": "message_text",
              "type": "string",
              "value": "={{ $json.text }}"
            },
            {
              "id": "6e83f9a7-cf75-4182-b2d2-3151e8af76b9",
              "name": "from",
              "type": "string",
              "value": "={{ $('WhatsApp Trigger1').item.json.messages[0].from }}"
            },
            {
              "id": "da4b602a-28ca-4b0d-a747-c3d3698c3731",
              "name": "message_caption",
              "type": "string",
              "value": "={{ $('Identify and ReRoute Message Types').item.json.video && $('Identify and ReRoute Message Types').item.json.video.caption || '' }}\n{{ $('Identify and ReRoute Message Types').item.json.image && $('Identify and ReRoute Message Types').item.json.image.caption || ''}}\n{{ $('Identify and ReRoute Message Types').item.json.audio && $('Identify and ReRoute Message Types').item.json.audio.caption || ''}}"
            }
          ]
        },
        "options": {}
      },
      "id": "18c94997-e55b-43fa-8c86-ad37f494ea65",
      "name": "Get User's Message",
      "type": "n8n-nodes-base.set",
      "position": [
        720,
        220
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "amount": 0
      },
      "id": "d908f8fe-43f1-4756-95fa-f927915c8393",
      "name": "Get Text",
      "type": "n8n-nodes-base.wait",
      "position": [
        20,
        540
      ],
      "webhookId": "99b49c83-d956-46d2-b8d3-d65622121ad9",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "operation": "send",
        "phoneNumberId": "266511473204092",
        "recipientPhoneNumber": "={{ $('WhatsApp Trigger1').item.json.messages[0].from }}",
        "textBody": "={{ $json.output }}",
        "additionalFields": {},
        "requestOptions": {}
      },
      "id": "79a84a62-fe0c-4df1-83dc-6d19ff52d470",
      "name": "Respond to User",
      "type": "n8n-nodes-base.whatsApp",
      "position": [
        1520,
        220
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "updates": [
          "messages"
        ]
      },
      "id": "d6c6fbda-1100-4e2c-8aa7-2d2bbce3f0b1",
      "name": "WhatsApp Trigger1",
      "type": "n8n-nodes-base.whatsAppTrigger",
      "position": [
        -760,
        200
      ],
      "webhookId": "0b1b3a9b-2f6a-4f5a-8385-6365d96f4802",
      "typeVersion": 1
    },
    {
      "parameters": {
        "model": "gpt-4o-2024-08-06",
        "options": {}
      },
      "id": "67704f70-adcc-41fb-9c6e-23ec35850dd6",
      "name": "OpenAI Chat Model5",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        340,
        360
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "ce548e20-e4e4-4422-bcf1-98bd65a7a254",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        340,
        680
      ]
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {}
      },
      "id": "5086065d-6514-4fdd-9df2-3a2e62a9f055",
      "name": "Audio Transcriber",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "position": [
        460,
        0
      ],
      "typeVersion": 1.5
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('WhatsApp Trigger1').item.json.contacts[0].wa_id }}",
        "tableName": "n8n_personalagent_chat_histories",
        "contextWindowLength": 15
      },
      "id": "039ec4b9-9f1f-48cb-95a4-d556739d9ed5",
      "name": "Postgres Chat Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.1,
      "position": [
        800,
        760
      ]
    },
    {
      "parameters": {
        "name": "contacts_data",
        "description": "Retrieves information about contacts and associated email addresses, templates and more.",
        "topK": 8
      },
      "id": "af93340b-4d90-45e9-8d6a-8c71e6718ac4",
      "name": "Vector Store Tool",
      "type": "@n8n/n8n-nodes-langchain.toolVectorStore",
      "typeVersion": 1,
      "position": [
        1780,
        500
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "4c759ad6-ca41-4bec-9c19-11182acd9e99",
      "name": "Embeddings OpenAI",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.1,
      "position": [
        1720,
        760
      ]
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {}
      },
      "id": "cfbf1f55-70e0-4a25-a574-54d97317456d",
      "name": "OpenAI Chat Model2",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        660,
        760
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "6899ffcf-d63e-48d8-9003-21cc7c45f344",
      "name": "OpenAI Chat Model3",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        2040,
        660
      ]
    },
    {
      "parameters": {
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "options": {
          "queryName": "match_documents"
        }
      },
      "id": "98bf4fc8-bcf7-4c62-93f4-277621d7a7ec",
      "name": "n8n_demo",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        1720,
        620
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "7a62c67e-8e37-478c-adb5-1e47ae849a10",
      "name": "SerpAPI",
      "type": "@n8n/n8n-nodes-langchain.toolSerpApi",
      "typeVersion": 1,
      "position": [
        1560,
        760
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "messages",
        "options": {}
      },
      "id": "ca9c63ac-1874-49fe-80b9-c4694f493d54",
      "name": "Split out message",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        -540,
        200
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "frjimenez2009@gmail.com",
          "mode": "list",
          "cachedResultName": "frjimenez2009@gmail.com"
        },
        "limit": "={{ $fromAI(\"Limit\") }}",
        "options": {
          "timeMin": "={{ $fromAI(\"After\") }}",
          "timeMax": "={{ $fromAI(\"Before\") }}"
        }
      },
      "id": "5d6a72c0-839e-4e83-b69f-400c94aee47e",
      "name": "Get Calendar Events",
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.2,
      "position": [
        940,
        760
      ]
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "frjimenez2009@gmail.com",
          "mode": "list",
          "cachedResultName": "frjimenez2009@gmail.com"
        },
        "start": "={{ $fromAI('start_date', 'The start time of the event in ISO format', 'string') }}",
        "end": "={{ $fromAI('end_date', 'The end time of the event in ISO format', 'string') }}",
        "additionalFields": {
          "attendees": [
            "={{ $fromAI('attendees', 'Email addresses of attendees (comma-separated)', 'string') }}"
          ],
          "description": "={{ $fromAI('description', 'Details or agenda for the event', 'string') }}",
          "summary": "={{ $fromAI('title', 'Specify the title of the event', 'string') }}"
        }
      },
      "id": "7b46a0e3-92f6-45ca-a8c7-6739d27ad649",
      "name": "Create Calendar Events",
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.2,
      "position": [
        1080,
        760
      ]
    },
    {
      "parameters": {
        "operation": "getAll",
        "limit": "={{ $fromAI('limit', 'the number of emails to retrieve, max of 3') }}",
        "simple": false,
        "filters": {
          "readStatus": "unread",
          "receivedAfter": "={{ $fromAI('received_after', 'Retrieve emails received after the current date, given a period specified by user if any. This is calculated dynamically based on the current date.', 'string') }}",
          "receivedBefore": "={{ $fromAI('received_before', 'Retrieve emails received before the current time today. This is calculated dynamically based on the current date.', 'string') }}"
        },
        "options": {}
      },
      "id": "3566ee66-7655-4264-a215-62b0e63b6903",
      "name": "Recieve Multiple Emails",
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        1240,
        760
      ],
      "webhookId": "ee66615f-8ca6-4b86-bb55-56b1d30bb388"
    },
    {
      "parameters": {
        "sendTo": "={{ $fromAI('email_send_to', 'The email recipient', 'string') }}",
        "subject": "={{ $fromAI('email_subject', 'The subject of the email', 'string') }}",
        "emailType": "text",
        "message": "={{ $fromAI('email_content', 'The content of the email message', 'string') }}",
        "options": {
          "appendAttribution": false
        }
      },
      "id": "e44a22c7-111a-494e-84d3-6e3e5a426106",
      "name": "Create and Approve Email",
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        1400,
        760
      ],
      "webhookId": "83bbb034-9202-415a-a146-0952b3716c6e",
      "notesInFlow": false
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "leftValue": "={{ $json.type == 'audio' && Boolean($json.audio) }}",
                    "rightValue": "audio"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "Audio Message"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "82aa5ff4-c9b6-4187-a27e-c7c5d9bfdda0",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "leftValue": "={{ $json.type == 'video' && Boolean($json.video) }}",
                    "rightValue": ""
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "Video Message"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "05b30af4-967b-4824-abdc-84a8292ac0e5",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "leftValue": "={{ $json.type == 'image' && Boolean($json.image) }}",
                    "rightValue": ""
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "Image Message"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra",
          "renameFallbackOutput": "Text Message"
        }
      },
      "id": "c434d373-0c8d-49f3-9b8d-c9d307b90058",
      "name": "Identify and ReRoute Message Types",
      "type": "n8n-nodes-base.switch",
      "position": [
        -260,
        200
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=The user sent the following message\nmessage type: {{ $json.message_type }}\nmessage text or description:\n```{{ $json.message_text }}```\n{{ $json.message_caption ? `message caption: ${$json.message_caption.trim()}` : '' }}",
        "options": {
          "systemMessage": "=# **Role:**\nYou are a highly efficient and intelligent personal assistant, responsible for managing calendar events, emails, and communication tasks seamlessly.\n\n# **Primary Tasks:**\n\n1. **Retrieve Calendar Events**  \n   - Use the **\"Get Events\"** tool to fetch calendar events based on user instructions.  \n   - Handle queries such as:\n     - \"Retrieve todayâ€™s events\"\n     - \"Get tomorrowâ€™s meetings\"\n   - Include details like:\n     - Event name, start and end time, location, video meeting link (if available), and participantsâ€™ names/emails.  \n   - Present results in a clear format:\n     ```\n     Event: [Event Name]  \n     Time: [Start Time] - [End Time]  \n     Location: [Location]  \n     Video Link: [Video Link]  \n     Participants:  \n     - [Name 1] ([Email 1])  \n     - [Name 2] ([Email 2])  \n     ```\n\n2. **Create Calendar Events**  \n   - Use the **\"Create Event\"** tool to schedule new events.  \n   - Inputs include:  \n     - Title, start date, end date, attendees, and description.  \n   - Resolve attendee names to email addresses using the **vector store tool** for contact references.  \n   - Example: For \"Add Sarah to the meeting,\" retrieve \"Sarah Thompson\" and her associated email from the vector store.  \n   - Confirm event details with the user before finalizing:\n     ```\n     Title: [Event Title]  \n     Time: [Start Date/Time] to [End Date/Time]  \n     Attendees: [List of Names/Emails]  \n     Description: [Event Description]  \n     ```\n   - If no end time or duration is stated, please assume the event will last 1 hour.\n\n\n3. **Retrieve Emails with Summaries**  \n   - Use the **\"Receive Many Emails\"** tool to fetch emails dynamically based on the userâ€™s request:\n     - Examples: \"Get todayâ€™s emails,\" \"Show emails from last week.\"  \n   - Summarize the retrieved emails into a user-friendly list:\n     ```\n     Email 1:  \n     - Subject: [Subject]  \n     - From: [Sender Name/Email]  \n     - Summary: [Brief description of email content]  \n     ```\n   - Allow users to select a specific email for further action.\n\n4. **Send Emails Using Templates**  \n   - Use the **\"Send & Approve Email\"** tool to send or reply to emails based on user instructions.  \n   - Leverage the **vector store tool** for predefined templates.  \n     - Example: If the user says, \"Send a meeting request to John,\" retrieve the **\"Meeting Request\"** template from the vector store.  \n   - Dynamically populate the template using user-provided details (e.g., recipient, date, and time):\n     ```\n     Template: Meeting Request  \n     Greeting: Hi [Recipientâ€™s Name],  \n     Purpose: [Reason for the email, dynamically populated].  \n     Closing: Best regards, [Your Name].  \n     ```\n   - Confirm with the user before sending:\n     ```\n     To: [Recipientâ€™s Email]  \n     Subject: [Subject Line]  \n     Body: [Draft Content]  \n     ```\n   - For replying to specific emails, incorporate context dynamically and confirm the draft with the user.\n\n# **Tool Usage**:\n- Dynamically invoke:\n  - **Vector Store Tool**: Retrieve contact details (e.g., names to email mappings) and predefined templates for emails.  \n  - **Calendar Tools**: Fetch or create calendar events.  \n  - **Gmail Tool**: Fetch, summarize, reply to, or send emails.  \n  - **SERP API Tool**: Perform real-time internet searches and provide summarized results.\n\n# **Ambiguity Handling**:\n1. Resolve vague references (e.g., \"Sarah\") by checking the **vector store tool** for the closest match.  \n   - Example: \"Invite Sarah to the meeting\" â†’ Resolve to \"Sarah Thompson\" (frjimenez2009@gmail.com).  \n2. If conflicting options exist, ask the user for clarification.  \n\n# **Examples**:\n\n## **Event Retrieval Example**\n**User Request**: \"Retrieve todayâ€™s events.\"  \n**Response**:\n```\n1. Event: Weekly Team Sync  \n   Time: 10:00 AM - 11:00 AM  \n   Location: FG Labs HQ  \n   Video Link: [Meet Link]  \n   Participants:  \n   - Fran Jimenez (frjimenez2009@gmail.com)  \n   - Frank Nillard (contact@fglabs.co)  \n\n2. Event: Client Presentation  \n   Time: 3:00 PM - 4:00 PM  \n   Location: Zoom  \n   Participants:  \n   - Sarah Thompson (frank@fglabs.co)  \n   - David Lee (frjimenez2009@hotmail.com)  \n```\n\n## **Email Summary Example**\n**User Request**: \"Get emails received today.\"  \n**Response**:\n```\n1. Email 1:  \n   - Subject: Collaboration Opportunity  \n   - From: Sarah Thompson (frank@fglabs.co)  \n   - Summary: \"Proposal to collaborate on a video project for next week.\"  \n\n2. Email 2:  \n   - Subject: Meeting Confirmation  \n   - From: Emily White (fglabs2024@gmail.com)  \n   - Summary: \"Confirmation of tomorrowâ€™s meeting at 10:00 AM. Requested agenda input.\"  \n```\n\n---\n\n### Final Notes:\n- **Image Understanding**: You will be given descriptions of images so acknowledge that you understand them and ask the user what do they want to do next with this information.\n- Make sure that the emails you send have the name Frank at the end. Do not leave any square brackets.\n- **Today's Date**:  \n  {{ new Date().toISOString() }}\n"
        }
      },
      "id": "2c1269f5-e2bd-49e4-a1a6-6abf7942e22e",
      "name": "Frank's Assistant",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        960,
        220
      ],
      "typeVersion": 1.6
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "Here is an image sent by the user. Describe the image and transcribe any text visible in the image. Put in as much detail as possible.",
        "messages": {
          "messageValues": [
            {
              "type": "HumanMessagePromptTemplate",
              "messageType": "imageBinary"
            }
          ]
        }
      },
      "id": "68fc4877-d427-47e2-b5fb-5ee3dae4211d",
      "name": "Image Explainer",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "position": [
        320,
        220
      ],
      "typeVersion": 1.4
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.text.body }}",
        "messages": {
          "messageValues": [
            {
              "message": "Summarize the user's message succinctly."
            }
          ]
        }
      },
      "id": "49cc2ef1-75bb-4675-9e60-c44b4d5e31f4",
      "name": "Text Summarizer",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "position": [
        320,
        540
      ],
      "typeVersion": 1.4
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-01-13T03:57:14.841Z",
  "versionId": "7a50708b-a079-45a8-b66a-26f9a53665e9"
}